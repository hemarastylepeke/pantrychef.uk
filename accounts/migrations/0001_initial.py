# Generated by Django 5.2.3 on 2025-10-12 20:58

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Budget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('period', models.CharField(choices=[('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly')], default='WEEKLY', max_length=10)),
                ('currency', models.CharField(choices=[('USD', 'USD'), ('EUR', 'EUR'), ('GBP', 'GBP')], default='USD', max_length=3)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goal_type', models.CharField(choices=[('LOSE_WEIGHT', 'Lose Weight'), ('GAIN_WEIGHT', 'Gain Weight'), ('BUILD_MUSCLE', 'Build Muscle'), ('MAINTAIN_WEIGHT', 'Maintain Weight'), ('MORE_FIBER', 'More Fiber'), ('MORE_IRON', 'More Iron'), ('MORE_VEGGIES', 'More Vegetables'), ('REDUCE_WASTE', 'Reduce Food Waste'), ('BUDGET_FRIENDLY', 'Budget Friendly')], max_length=20)),
                ('target_value', models.FloatField(blank=True, help_text='Target weight or specific metric', null=True)),
                ('current_value', models.FloatField(blank=True, null=True)),
                ('start_date', models.DateField(auto_now_add=True)),
                ('target_date', models.DateField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('priority', models.IntegerField(default=1, help_text='1-5, with 5 being highest priority')),
                ('bmi', models.FloatField(blank=True, help_text='Body Mass Index', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_image', models.ImageField(blank=True, default='profile_images/default_profile_image.png', null=True, upload_to='profile_images/')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('subscription_plan', models.CharField(choices=[('basic', 'Basic'), ('intermediate', 'Intermediate'), ('pro', 'Pro')], default='basic', max_length=20)),
                ('height', models.FloatField(blank=True, help_text='Height in cm', null=True)),
                ('weight', models.FloatField(blank=True, help_text='Weight in kg', null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('prefer_not_to_say', 'Prefer not to say')], max_length=20, null=True)),
                ('activity_level', models.CharField(blank=True, choices=[('sedentary', 'Sedentary'), ('light', 'Lightly Active'), ('moderate', 'Moderately Active'), ('active', 'Very Active'), ('athlete', 'Athlete')], max_length=20, null=True)),
                ('allergies', models.JSONField(blank=True, default=list, help_text='List of food allergies')),
                ('dietary_restrictions', models.JSONField(blank=True, default=list, help_text='e.g., vegetarian, vegan, gluten-free')),
                ('disliked_ingredients', models.JSONField(blank=True, default=list)),
                ('preferred_cuisines', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
